Installation instructions for OpenVPN, a Secure Tunneling Daemon

Copyright (C) 2002 by James Yonan. This program is free software;
you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

For the latest stable version of OpenVPN, go to:

	http://openvpn.sourceforge.net/

For the latest development version of OpenVPN, go to:

	http://openvpn.sourceforge.net/beta/

SUPPORTED PLATFORMS:
  (1) Linux 2.2 or higher
  (2) Solaris
  (3) OpenBSD (Comes with OpenSSL and tun devices by default)
  (4) Mac OS X Darwin (Experimental)
  (5) FreeBSD (experimental)

REQUIRES:
  (1) tun and/or tap driver to allow user-space programs to control
      a virtual point-to-point IP or Ethernet device.  See
      TUN/TAP Driver Configuration section below for more info.

OPTIONAL (but recommended):
  (1) OpenSSL library, necessary for encryption, version 0.9.5 or higher
      required, available from http://www.openssl.org/
  (2) LZO real-time compression library, required for link compression,
      available from http://www.oberhumer.com/opensource/lzo/
      OpenBSD users can use ports or packages to install lzo, but remember
      to add "--with-lzo-headers" and "--with-lzo-lib" directives to
      "configure", pointing to /usr/local/include and /usr/local/lib
      respectively since gcc will not find them otherwise.
  (3) Pthread library.

OPTIONAL (for developers only):
  (1) Dmalloc library
      -- available from http://dmalloc.com/
  (2) Autoconf 2.50 or higher + Automake 1.6 or higher
      -- available from http://www.gnu.org/software/software.html

BUILD commands:

	./configure
	make
	make install

OPTIONS for ./configure:

  --disable-lzo             Do not compile LZO compression support
  --disable-crypto          Do not compile OpenSSL crypto support
  --disable-ssl             Do not compile OpenSSL SSL support for
                            TLS-based key exchange

  --enable-pthread          Compile pthread support for
                            improved latency during SSL/TLS key
                            negotiations (Linux or Solaris only)

  --with-ssl-headers=DIR    Crypto/SSL Include files location
  --with-ssl-lib=DIR        Crypto/SSL Library location
  --with-lzo-headers=DIR    LZO Include files location
  --with-lzo-lib=DIR        LZO Library location

  --with-leak-check=TYPE    Build with memory leak checking
                            TYPE = dmalloc or ssl

TUN/TAP Driver Configuration:

 Linux 2.4 or higher (with integrated TUN/TAP driver):

  add to /etc/modules.conf: alias char-major-10-200 tun
  make device:              mknod /dev/net/tun c 10 200
  load driver:              modprobe tun
  enable routing:           echo 1 > /proc/sys/net/ipv4/ip_forward

 Linux 2.2 or Solaris:

  You should obtain
  version 1.1 of the TUN/TAP driver from
  http://vtun.sourceforge.net/tun/
  and follow the installation instructions.

 OpenBSD:

  OpenBSD ships with tun0 and tun1 installed by default.

 Mac OS X:

  Obtain Christoph Pfisterer's
  tun driver at
  http://chrisp.de/en/projects/tunnel.html

 See the man page for more information, usage examples, and
 information on firewall configuration.

BUGS:

* OpenVPN works fine with the 1.1 TUN/TAP driver in the Linux 2.2 kernels,
  and with the integrated 1.4 TUN/TAP driver in the Linux 2.4 kernels, but
  there's a "gray area" in the 2.4 kernels before 2.4.7 where various
  things may break due to the TUN/TAP driver and other kernel components
  being in a state of flux, so I wouldn't recommend using OpenVPN on these
  kernels unless you are prepared to do some debugging and testing.

* Pthread support is not yet stable on OpenBSD.

* If run through a firewall using OpenBSDs packet filter PF and the
  filter rules include a "scrub" directive, you may get problems talking
  to Linux hosts over the tunnel, since the scrubbing will kill packets
  sent from Linux hosts if they are fragmented. This is usually seen as
  tunnels where small packets and pings get through but large packets
  and "regular traffic" don't.
