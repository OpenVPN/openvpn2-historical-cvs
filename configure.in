dnl  OpenVPN -- An application to securely tunnel IP networks
dnl             over a single UDP port, with support for TLS-based
dnl             session authentication and key exchange,
dnl             packet encryption, packet authentication, and
dnl             packet compression.
dnl
dnl  Copyright (C) 2002 James Yonan <jim@yonan.net>
dnl
dnl  This program is free software; you can redistribute it and/or modify
dnl  it under the terms of the GNU General Public License as published by
dnl  the Free Software Foundation; either version 2 of the License, or
dnl  (at your option) any later version.
dnl
dnl  This program is distributed in the hope that it will be useful,
dnl  but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl  GNU General Public License for more details.
dnl
dnl  You should have received a copy of the GNU General Public License
dnl  along with this program (see the file COPYING included with this
dnl  distribution); if not, write to the Free Software Foundation, Inc.,
dnl  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

dnl Process this file with autoconf to produce a configure script.

dnl Special Macros

dnl AC_CHECK_INET_TYPE(TYPE, DEFAULT)
AC_DEFUN(AC_CHECK_INET_TYPE, [
AC_CHECK_HEADERS(sys/socket.h netinet/in.h arpa/inet.h)
AC_MSG_CHECKING(for $1)
AC_CACHE_VAL(ac_cit_type_$1,
[AC_EGREP_CPP(dnl
changequote(<<,>>)dnl
<<(^|[^a-zA-Z_0-9])$1[^a-zA-Z_0-9]>>dnl
changequote([,]), [
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
], ac_cit_type_$1=yes, ac_cit_type_$1=no)])dnl
AC_MSG_RESULT($ac_cit_type_$1)
if test $ac_cit_type_$1 = no; then
AC_DEFINE($1, $2)
fi
])

AC_INIT(openvpn.c)

AM_CONFIG_HEADER(config.h)

AC_ARG_ENABLE(lzo,
   --disable-lzo             Do not compile LZO compression support,
   LZO="$enableval",
   LZO="yes"
)

AC_ARG_ENABLE(crypto,
   --disable-crypto          Do not compile OpenSSL crypto support,
   CRYPTO="$enableval",
   CRYPTO="yes"
)

AC_ARG_ENABLE(ssl,
   --disable-ssl             Do not compile OpenSSL SSL support for TLS-based key exchange,
   SSL="$enableval",
   SSL="yes"
)

AC_ARG_WITH(ssl-headers,
   --with-ssl-headers=DIR    Crypto/SSL Include files location,
   CS_HDR_DIR="$withval"
   CPPFLAGS="$CPPFLAGS -I$withval" 
)

AC_ARG_WITH(ssl-lib,
   --with-ssl-lib=DIR        Crypto/SSL Library location,
   LIBS="$LIBS -L$withval" 
)

AC_ARG_WITH(lzo-headers,
   --with-lzo-headers=DIR    LZO Include files location,
   LZO_HDR_DIR="$withval"
   CPPFLAGS="$CPPFLAGS -I$withval" 
)

AC_ARG_WITH(lzo-lib,
   --with-lzo-lib=DIR        LZO Library location,
   LIBS="$LIBS -L$withval" 
)

AC_ARG_WITH(leak-check,
   --with-leak-check=TYPE    Build with memory leak checking  TYPE = dmalloc or ssl,
   LEAK="$withval"
)

dnl Guess host type.
AC_CANONICAL_HOST
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(openvpn, 1.1.0.8)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h syslog.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_VPRINTF
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(gettimeofday select socket strerror)

dnl check that in_addr_t is defined
AC_CHECK_INET_TYPE(in_addr_t, uint32_t)

AC_CHECKING( for TUN/TAP driver version ... )
AC_CHECK_HEADER(linux/if_tun.h,
	AC_MSG_RESULT( if_tun.h found -- assuming TUN/TAP driver 1.4. ),
	[
	  AC_DEFINE(OLD_TUN_TAP)
	  AC_MSG_RESULT( if_tun.h not found -- assuming TUN/TAP driver 1.1 or earlier. )
	]
)

if test "$CRYPTO" = "yes"; then
   if test "$SSL" = "yes"; then
       AC_DEFINE(USE_SSL)
       LIBS="$LIBS -lssl"
   fi
   AC_DEFINE(USE_CRYPTO)
   LIBS="$LIBS -lcrypto"

   AC_CHECKING( for OpenSSL Crypto Library and Header files ... )
   AC_CHECK_HEADER(openssl/evp.h,
	AC_CHECK_LIB(crypto, EVP_CIPHER_CTX_init,
            [
		   AC_CHECKING( that OpenSSL Library is at least version 0.9.6 ... )
		   AC_EGREP_CPP(yes,
		     [
		       #include "openssl/evp.h"
		       #if SSLEAY_VERSION_NUMBER >= 0x00906000L
		         yes
		       #endif
		     ],
		     AC_MSG_RESULT( Found OpenSSL crypto library. ),
		     AC_MSG_ERROR( OpenSSL crypto Library is too old. )
		   )
	    ],
	    AC_MSG_ERROR( OpenSSL Crypto library not found. )
	),
	AC_MSG_ERROR( OpenSSL Crypto headers not found. )
   )
   AC_CHECK_LIB(crypto, EVP_CIPHER_CTX_set_key_length,
	AC_MSG_RESULT( OpenSSL crypto library contains EVP_CIPHER_CTX_set_key_length. ),
	AC_MSG_ERROR( Required function EVP_CIPHER_CTX_set_key_length not found in OpenSSL crypto library )
   )

   if test "$SSL" = "yes"; then
      AC_CHECKING( for OpenSSL SSL Library and Header files ... )
      AC_CHECK_HEADER(openssl/ssl.h,
	   AC_CHECK_LIB(ssl, SSL_CTX_new,
	       [
                  if test "$LEAK" = "ssl"; then
                     AC_CHECKING( for Memory Debugging Capabilities in OpenSSL Library ... )
                     AC_CHECK_LIB(ssl, CRYPTO_mem_ctrl,
                         [
                             AC_DEFINE(CRYPTO_MDEBUG)
			     AC_MSG_RESULT(NOTE: OpenSSL library must be compiled with CRYPTO_MDEBUG)
                         ],
                         AC_MSG_ERROR( Memory Debugging function in OpenSSL library not found. )
                     )
                  fi
	       ],
	       AC_MSG_ERROR( OpenSSL SSL library not found. )
	   ),
	   AC_MSG_ERROR( OpenSSL SSL headers not found. )
      )
   fi
fi

if test "$LZO" = "yes"; then
   AC_CHECKING( for LZO Library and Header files ... )
   AC_CHECK_HEADER(lzo1x.h, 
        AC_CHECK_LIB(lzo, lzo1x_1_15_compress,
	    [
	       LIBS="$LIBS -llzo"
	       AC_DEFINE(USE_LZO)
	    ],
	    AC_MSG_ERROR( LZO headers were found but LZO library was not found. )
	),
	[
	  AC_MSG_RESULT( LZO library available from http://www.oberhumer.com/opensource/lzo/ )
	  AC_MSG_RESULT( Or try ./configure --disable-lzo )
          AC_MSG_ERROR( LZO library and headers not found. )
	]
   )
fi

if test "$LEAK" = "dmalloc"; then
   AC_CHECKING( for dmalloc Library and Header files ... )
   AC_CHECK_HEADER(dmalloc.h, 
        AC_CHECK_LIB(dmalloc, malloc,
	    [
	       LIBS="$LIBS -ldmalloc"
	       AC_DEFINE(DMALLOC)
	    ],
	    AC_MSG_ERROR( dmalloc library not found. )
	),
        AC_MSG_ERROR( dmalloc headers not found. )
   )
fi

AC_OUTPUT(Makefile)
